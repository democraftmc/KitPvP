plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.planetgallium'
version = '2.2.2'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)  // Assurez-vous d'utiliser la bonne version
    }
}

repositories {
    mavenCentral()
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    maven { url 'https://maven.enginehub.org/repo/' }
    maven { url 'https://repo.opencollab.dev/main/' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly 'org.geysermc.floodgate:api:2.2.4-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly('com.sk89q.worldguard:worldguard-bukkit:7.0.0') {
        exclude group: 'org.bstats', module: 'bstats-bukkit'
    }
    compileOnly 'com.sk89q.worldguard:worldguard-legacy:6.2'
    implementation 'com.github.cryptomorin:XSeries:11.2.1'
    compileOnly 'com.googlecode.json-simple:json-simple:1.1.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'mysql:mysql-connector-java:5.1.44'
    compileOnly 'org.xerial:sqlite-jdbc:3.36.0.3'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    relocate 'com.cryptomorin.xseries', 'com.planetgallium.kitpvp'
    relocate 'com.mysql', 'com.planetgallium.sql'
    exclude 'com/cryptomorin/xseries/messages/ActionBar*'
    exclude 'com/cryptomorin/xseries/particles/*'
    exclude 'com/cryptomorin/xseries/NMSExtras*'
    exclude 'com/cryptomorin/xseries/NoteBlockMusic*'
    exclude 'com/cryptomorin/xseries/SkullUtils*'
    exclude 'com/cryptomorin/xseries/XBiome*'
    exclude 'com/cryptomorin/xseries/XBlock*'
    exclude 'com/cryptomorin/xseries/XEntity*'
    exclude 'com/cryptomorin/xseries/XItemStack*'
    exclude 'com/cryptomorin/xseries/XTag*'
    exclude 'com/cryptomorin/xseries/XWorldBorder*'
}

def devOutputDir = '/Users/nico/Developer/Spigot/Latest/plugins/'

tasks.register('copyToDev', Copy) {
    dependsOn tasks.named('shadowJar')
    from tasks.named('shadowJar').get().archiveFile
    into devOutputDir
}

tasks.named('build') {
    finalizedBy tasks.named('copyToDev')
}
